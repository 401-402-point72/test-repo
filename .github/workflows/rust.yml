name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: |
        current_dir="$(basename "$PWD")"

        if [ -d "$current_dir" ]; then
          cd "$current_dir"
          cargo run
          cd ../
        else
          echo "No project folder was found: $current_dir"
        fi
    - name: Run tests
      run: |
        current_dir="$(basename "$PWD")"

        if [ -d "$current_dir" ]; then
          cd "$current_dir"
          cargo test
          cd ../
        else
          echo "No project folder was found: $current_dir"
        fi
    - name: Run formatter
      run: |
        current_dir="$(basename "$PWD")"

        git pull --rebase && git remote update origin --prune && git fetch -p -t && for branch in $(git for-each-ref --format "%(refname) %(upstream:track)" refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done

        if [ -d "$current_dir" ]; then
          cd "$current_dir"
          cargo fmt
          cd ../

          if [ -n "$(git status --porcelain)" ]; then
            git config user.email "actions@example.com"
            git config user.name "GitHub Actions"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            git status
            git checkout -b formatter
            git add .
            git commit -m "Format code"
            # git pull --rebase && git remote update origin --prune && git fetch -p -t && for branch in $(git for-each-ref --format "%(refname) %(upstream:track)" refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done
            git push origin formatter

            gh pr create --base main --head formatted-branch --title "Format code" --body "This pull request contains formatted code."
            echo "Formatted repo and opened pr"
          else
            echo "Nothing to format"
          fi
        else
          echo "No project folder was found: $current_dir"
        fi
